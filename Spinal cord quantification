#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 21 11:59:15 2021

@author: Chia-Teng
"""

import pandas as pd
import matplotlib.pyplot as plt

def read_Fl_files(file_folder, file_group, i):
    """
    Input: (where csv files are?)
        file_folder example: /Volumes/Teng/FL MS/Analysis/
        file_group example: 0dpt/nes_EW/
        i: sample #, int or str
    The folder should contains cvs files named #R/#G/#RB/#GB.csv,
    B stands for background.
    return a tuple of pandas DataFrame:
    (counts, R_BG_means, R_means, R_means_subtract_Bg, R_integrate,
             G_BG_means, G_means, G_means_subtract_Bg, G_integrate)
    Columns: X, Value 
    """
    # Read backgound csv
    R_BG = pd.read_csv(file_folder + file_group + str(i+1) + "RB.csv")
    G_BG = pd.read_csv(file_folder + file_group + str(i+1) + "GB.csv")
    
    # Average background intensity according to their X position
    R_BG_means = R_BG.groupby("X").mean().drop(columns = "Y").loc[0:2751]
    G_BG_means = G_BG.groupby("X").mean().drop(columns = "Y").loc[0:2751]
    
    # Read and process the mCherry intensity file
    Huc_data = pd.read_csv(file_folder + file_group + str(i+1) + "R.csv") # Read file
    counts = Huc_data.groupby("X").count().drop(columns = "Y").loc[0:2751] # Count pixel # (diameter) across X position
    R_means = Huc_data.groupby("X").mean().drop(columns = "Y").loc[0:2751] # Average mCherry intensity according to their X position
    R_means_subtract_Bg = R_means - R_BG_means # Subtract mean mCherry intensity to their corresponding backgound at the same X position
    R_integrate = R_means_subtract_Bg * counts # Mutiply background subtracted-mean mCherry intensity by their diameter (in pixel) at the same X position
    
    # Read and process the GFP intensity file, same process as mCherry
    GFP_data = pd.read_csv(file_folder + file_group + str(i+1) + "G.csv")
    G_means = GFP_data.groupby("X").mean().drop(columns = "Y").loc[0:2751]
    G_means_subtract_Bg = G_means - G_BG_means
    G_integrate = G_means_subtract_Bg * counts
    
    return (counts,
            R_BG_means, R_means, R_means_subtract_Bg, R_integrate,
            G_BG_means, G_means, G_means_subtract_Bg, G_integrate)

def ROI_means(means, X_range):
    """Calculate mean intensity of given ROI range (x1, x2)"""
    min_X, max_X = X_range
    sub_data = means.iloc[min_X: max_X]
    return sub_data.mean()

def ROI_diameter(counts, X_range):
    """mean diameter in ROI in μm"""
    min_X, max_X = X_range
    sub_data = counts.iloc[min_X:max_X]
    return sub_data.mean()*.908

def plot_means_vs_background(means_subtract_Bg, BG_means, Fluorescence = "Fluorescence"): # not implemented yet
    plt.figure("R"+dpt+genotype+str(i+1)) # Assign a unique code for each sample
    plt.fill_between(means_subtract_Bg.index * .908, 0, means_subtract_Bg.Value, color = "#DC5C60") # Above real fluorescent signals, colored in red
    plt.fill_between(BG_means.index * .908, -BG_means.Value, color = "#D9D9D9") # Below background signals, colored in gray
    plt.xlim(0, 2500) # X axis range in μm
    plt.ylim(-2000, 16000) # Y axis range, be free to adjust to make it apply to all samples
    plt.xlabel("position (μm)")
    plt.ylabel(Fluorescence + " mean intensity (AU)")
    plt.title(dpt + "-" + treatment + "-mCherry") # Output is like "0dpt-EW-mCherry", be free to change to the format you like
    plt.savefig(file_folder + "Figures/" + Fluorescence + "_mean" + dpt + "-" + treatment + "-" + genotype + "-mCherry" + str(i+1) + ".pdf")
    # Help you to create a "Figure" folder and save images in it.

def plot_intensity_with_ROI(integrate, means, X_range): # not implemented yet
    fig, ax1 = plt.subplots()
    color = 'tab:red'
    ax1.set_xlabel('position (μm)')
    ax1.set_ylabel('integrate (AU)', color="#EE2B2A")
    plt.ylim(0, 2000000)
    ax1.plot(integrate.index * .908, integrate.Value, color="#EE2B2A", alpha = 0.5)
    ax1.tick_params(axis='y', labelcolor=color) 

# This program only takes file folders arraged in a specific order and naming
# e.g. /Volumes/Teng/FL MS/Analysis/0dpt/nes_EW/

file_folder = "/Volumes/Teng/FL MS/Analysis/" # Change this to your folder directory
max_dpt = 4 # What is the max dpt you have?
treatments = ["EW", "MTZ"] # Enter your treatment as list. 
genotypes = ["nes", "sox2"]
max_sample = 11 # what is the largest sample size of you have? Be free to enter a large number.
X_start, X_end = 500, 1500 # start/end X position, in μm

# Create an empty pandas DataFrame
columns = ["genotype",
           "dpt",
           "treatment", 
           "mCherry", "GFP", 
           "SC_diameter", 
           "Weighted_mCherry",
           "Weighted_GFP"]
data = pd.DataFrame(columns = columns)

# Loop over the samples
for dpt in [str(i) + "dpt" for i in range(max_dpt + 1)]:
    for treatment in treatments:
        for genotype in genotypes:
            file_group  = dpt + "/" + genotype + "_" + treatment + "/" # like "4dpt/sox2_MTZ/"
            for i in range(max_sample):

                try: # Loop until no more samples to analyze
                    
                    # Retrieve processed data
                    (counts,
                     R_BG_means, R_means, R_means_subtract_Bg, R_integrate,
                     G_BG_means, G_means, G_means_subtract_Bg, G_integrate) = read_Fl_files(file_folder, file_group, i)
                    
                    # Calculation based on ROI
                    X_range = (int((X_start+0.5)/.908), int((X_end+0.5)/.908)) # converted to pixel and int
                    mCherry_intensity = ROI_means(R_means_subtract_Bg, X_range)
                    GFP_intensity = ROI_means(G_means_subtract_Bg, X_range)
                    SC_diameter = ROI_diameter(counts, X_range)
                    
                    # append process/calculated data
                    sub_data = pd.DataFrame(columns = columns)
                    sub_data.loc[i] = [genotype,
                                       dpt,
                                       treatment,
                                       mCherry_intensity.Value,
                                       GFP_intensity.Value,
                                       SC_diameter.Value,
                                       (mCherry_intensity * SC_diameter).Value,
                                       (GFP_intensity * SC_diameter).Value]
                    data = data.append(sub_data)
                    
                    # plot mCherry mean intensity-background intensity figure, be free to commend these out if not needing it
                    plt.figure("R"+dpt+genotype+str(i+1)) # Assign a unique code for each sample
                    plt.fill_between(R_means_subtract_Bg.index * .908, 0, R_means_subtract_Bg.Value, color = "#DC5C60") # Above real fluorescent signals, colored in red
                    plt.fill_between(R_BG_means.index * .908, -R_BG_means.Value, color = "#D9D9D9") # Below background signals, colored in gray
                    plt.xlim(0, 2500) # X axis range in μm
                    plt.ylim(-2000, 16000) # Y axis range, be free to adjust to make it apply to all samples
                    plt.xlabel("position (μm)")
                    plt.ylabel("mCherry mean intensity (AU)")
                    plt.title(dpt + "-" + treatment + "-mCherry") # Output is like "0dpt-EW-mCherry", be free to change to the format you like
                    plt.savefig(file_folder + "Figures/mCherry_mean" + dpt + "-" + treatment + "-" + genotype + "-mCherry" + str(i+1) + ".pdf") # Help you to create a "Figure" folder and save images in it.

                    # plot GFP mean intensity-background intensity figure, be free to commend these out if not needing it
                    plt.figure("G"+dpt+genotype+str(i+1))
                    plt.fill_between(G_means_subtract_Bg.index * .908, 0, G_means_subtract_Bg.Value, color = "#70BE71")
                    plt.fill_between(G_BG_means.index * .908, -G_BG_means.Value, color = "#D9D9D9")   
                    plt.xlim(0, 2500)
                    plt.ylim(-7000, 7000) # Y axis range, be free to adjust to make it apply to all samples
                    plt.xlabel("position (μm)")
                    plt.ylabel("GFP mean intensity (AU)")
                    plt.title(dpt + "-" + treatment + "-" + genotype) # Output is like "0dpt-EW-sox2", be free to change to the format you like
                    plt.savefig(file_folder + "Figures/" + genotype + "/" + dpt + "-" + treatment + "-" + genotype + "-" + "GFP" + str(i+1) + ".pdf")

                    
                    # Plot and merge mCherry integrated intensity
                    plt.figure(dpt)
                    if treatment == "EW":
                        EW_R = plt.plot(R_integrate.index * .908, R_integrate.Value, '-', ms = 5, color= "#1397F1", alpha = 0.2, label = "Egg water")
                    elif treatment == "MTZ":
                        MTZ_R = plt.plot(R_integrate.index * .908, R_integrate.Value, '-', ms = 5, color= "#EE2B2A", alpha = 0.2, label = "2.5 mM MTZ")

                    plt.xlabel('position (μm)')
                    plt.ylabel('mCherry integrated intensity')
                    plt.title(dpt + "-" + "HuC")
                    plt.xlim(0, 2500)
                    plt.ylim(0, 2000000)

                    # Plot and merge GFP integrated intensity
                    plt.figure(dpt+genotype)
                    if treatment == "EW":
                        EW_G = plt.plot(G_integrate.index * .908, G_integrate.Value, '-', ms = 5, color= "#1397F1", alpha = 0.2, label = "Egg water")
                    elif treatment == "MTZ":
                        MTZ_G = plt.plot(G_integrate.index * .908, G_integrate.Value, '-', ms = 5, color= "#EE2B2A", alpha = 0.2, label = "2.5 mM MTZ")
                    plt.xlabel('position (μm)')
                    plt.ylabel('GFP integrated intensity')
                    plt.title(dpt + "-" + genotype)
                    plt.xlim(0, 2500)
                    plt.ylim(0, 400000)
                    
                except FileNotFoundError: # when running out of samples in a group
                
                    # merge and add legends on integrated plots
                    plt.figure(dpt+genotype)
                    handles, labels = plt.gca().get_legend_handles_labels()
                    by_label = dict(zip(labels, handles))
                    plt.legend(by_label.values(), by_label.keys())
                    plt.savefig(file_folder + "Figures/HuC_integrated/" + dpt + "-" + genotype + ".pdf")
                    
                    plt.figure(dpt)
                    handles, labels = plt.gca().get_legend_handles_labels()
                    by_label = dict(zip(labels, handles))
                    plt.legend(by_label.values(), by_label.keys())
                    plt.savefig(file_folder + "Figures/" + genotype + "_integrated/" + dpt + "-mCherry" + ".pdf")
                    
                    print(genotype, dpt, treatment, str(i+1) + " not there.")
                    break


# data.to_csv(file_folder + "data.csv", index = False)